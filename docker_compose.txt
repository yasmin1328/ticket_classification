version: '3.8'

services:
  # Main application service
  incident-classifier:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: incident-classifier-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      # Mount data directory for persistence
      - ./data:/app/data
      - ./results:/app/results
      - ./logs:/app/logs
      - ./models:/app/models
      # Mount dataset (read-only)
      - ./Thiqa_Incidents_Example.xlsx:/app/Thiqa_Incidents_Example.xlsx:ro
    networks:
      - classifier-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: incident-classifier-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - classifier-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: incident-classifier-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - classifier-network
    restart: unless-stopped
    depends_on:
      - incident-classifier
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: incident-classifier-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - classifier-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: incident-classifier-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - classifier-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  classifier-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  incident-classifier:
    build:
      target: builder  # Use builder stage for development
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      # Mount source code for live reload
      - .:/app
    ports:
      - "5000:5000"
      - "5678:5678"  # Debug port
    command: ["python", "api_service.py", "--host", "0.0.0.0", "--port", "5000", "--debug"]

  # Development database (SQLite)
  # For production, consider PostgreSQL or MongoDB
  
  # Log aggregation for development
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: incident-classifier-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - classifier-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: incident-classifier-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - classifier-network
    depends_on:
      - elasticsearch

volumes:
  elasticsearch-data:
    driver: local
